<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">

	<!-- Writing aspects -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<bean name="triangle" class="org.roba.springaop.model.Triangle">
		<property name="name" value="Triangle name"></property>
	</bean>

	<bean name="circle" class="org.roba.springaop.model.Circle">
		<!-- Commenting this part for an AfterAndReturnAdviceTest -->
		<!-- <property name="name" value="Circle name"></property> -->
	</bean>

	<bean name="shapeService" class="org.roba.springaop.service.ShapeService"
		autowire="byName"></bean>

	<!-- Testing how pointcut is working -->
	<bean name="pointcut" class="org.roba.springaop.service.ShapeService"
		autowire="byName"></bean>

	<!-- Testing how pointcut is working part two -->
	<bean name="pointcut2" class="org.roba.springaop.service.ShapeService"
		autowire="byName"></bean>

	<!-- Testing after advice -->
	<bean name="afterAdvice" class="org.roba.springaop.service.ShapeService"
		autowire="byName"></bean>

	<bean name="loggingAspect" class="org.roba.springaop.aspect.LoggingAspect"></bean>

	<!-- Testing annotation writing in Spring -->
	<!-- Declaring AOP configuration not with annotation but in spring.xml -->
	<aop:config>
		<aop:aspect id="loggingAspect" ref="loggingAspect">
			<aop:pointcut expression="execution(* get*())" id="allGetters" />
			<aop:around method="myAroundAdvice" pointcut-ref="allGetters" />
		</aop:aspect>
	</aop:config>

</beans>